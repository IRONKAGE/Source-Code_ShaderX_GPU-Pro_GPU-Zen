#include "ShaderCommon.h"
#include "LightHelper.h"

struct PS_INPUT
{
	float4 pos : SV_Position;
	nointerpolation uint4 vertPos : VERTPOS;
	nointerpolation uint vertPosv2z : VERTPOSZ;
	nointerpolation uint rtArrayIndex : SV_RenderTargetArrayIndex;
};

bool linesegment_vs_plane(float3 p0, float3 p1, float3 pn, out float lerp_val)
{
    float3 u = p1 - p0;

    float D = dot(pn, u);
    float N = -dot(pn, p0);

    //IEEE 754-2008 in HLSL tricks
    lerp_val = N / D; //Division by zero returns -/+ INF (except for 0/0 which returns NaN)
    return !(lerp_val != saturate(lerp_val)); //saturate NaN returns 0 and saturate -/+INF returns correct value //The comparison NE, when either or both operands is NaN returns TRUE.
}

bool is_in_xslice(float3 top_plane, float3 bottom_plane, float3 vert_point)
{
	return (top_plane.y * vert_point.y + top_plane.z * vert_point.z >= 0.0f && bottom_plane.y * vert_point.y + bottom_plane.z * vert_point.z >= 0.0f);
}

bool is_in_yslice(float3 left_plane, float3 right_plane, float3 vert_point)
{
	return (left_plane.x * vert_point.x + left_plane.z * vert_point.z >= 0.0f && right_plane.x * vert_point.x + right_plane.z * vert_point.z >= 0.0f );
}

bool ray_vs_triangle(float3 ray_dir, float3 vert0, float3 vert1, float3 vert2, out float z_pos)
{
	float3 e1 = vert1 - vert0;
	float3 e2 = vert2 - vert0;
	float3 q = cross(ray_dir, e2);
	float a = dot(e1, q);
	
	if(a > -0.000001f && a < 0.000001f)
		return false;
	
	float f = 1.0f / a;
	float u = f * dot(-vert0, q);

	if(u != saturate(u)) 
		return false;
	
	float3 r = cross(-vert0, e1);
	float v = f * dot(ray_dir, r);

	if(v < 0.0f || (u + v) > 1.0f) 
		return false;
	
	z_pos = f * dot(e2, r) * ray_dir.z;

	return true;
}

float2 min_max(float2 depth_min_max, in float depth)
{
	depth_min_max.x = min(depth_min_max.x, depth);
	depth_min_max.y = max(depth_min_max.y, depth);
	
	return depth_min_max;
}

float2 main(PS_INPUT input, bool is_front_face : SV_IsFrontFace) : SV_TARGET
{
	float3 vert0 = f16tof32(uint3((input.vertPos.x >> 16), (input.vertPos.x & 0xFFFF), (input.vertPos.y >> 16)));
	float3 vert1 = f16tof32(uint3((input.vertPos.y & 0xFFFF), (input.vertPos.z >> 16), (input.vertPos.z & 0xFFFF)));
	float3 vert2 = f16tof32(uint3((input.vertPos.w >> 16), (input.vertPos.w & 0xFFFF), (input.vertPosv2z & 0xFFFF)));

	float2 depthMinMax = float2(FARZ, 0.0f);

	const float ey = tan(PI / 4.0f * 0.5f);
	const float ex = ey * WINDOW_WIDTH / WINDOW_HEIGHT;

	const float3 left_plane 	=  normalize(float3(1.0f,  0.0f, (1.0f - 2.0f * floor(input.pos.x) / CLUSTERSX) * ex));
	const float3 right_plane 	= -normalize(float3(1.0f,  0.0f, (1.0f - 2.0f * floor(input.pos.x + 1.0f) / CLUSTERSX) * ex));
	const float3 top_plane 		=  normalize(float3(0.0f, -1.0f, (1.0f - 2.0f * floor(input.pos.y) / CLUSTERSY) * ey));
	const float3 bottom_plane 	= -normalize(float3(0.0f, -1.0f, (1.0f - 2.0f * floor(input.pos.y + 1.0f) / CLUSTERSY) * ey));
	
	////////////////////////////////////////////////////////////////////////
	//Case where the min/max depth is one of the corners of the tile
	//cross product of plane normals return the ray direction through the corner. All planes and rays go through (0,0,0)
	float z_pos;
	depthMinMax = ray_vs_triangle(cross(top_plane, left_plane), vert0, vert1, vert2, z_pos) ? min_max(depthMinMax, z_pos) : depthMinMax;
	depthMinMax = ray_vs_triangle(cross(top_plane, right_plane), vert0, vert1, vert2, z_pos) ? min_max(depthMinMax, z_pos) : depthMinMax;
	depthMinMax = ray_vs_triangle(cross(right_plane, bottom_plane), vert0, vert1, vert2, z_pos) ? min_max(depthMinMax, z_pos) : depthMinMax;
	depthMinMax = ray_vs_triangle(cross(bottom_plane, left_plane), vert0, vert1, vert2, z_pos) ? min_max(depthMinMax, z_pos) : depthMinMax;

	///////////////////////////////////////////////////////////////////////
	//Case where a vertex is the min/max depth of the tile
	//Check if vertex is inside all four planes
	depthMinMax = (is_in_xslice(top_plane, bottom_plane, vert0) && is_in_yslice(left_plane, right_plane, vert0)) ? min_max(depthMinMax, vert0.z) : depthMinMax; 
	depthMinMax = (is_in_xslice(top_plane, bottom_plane, vert1) && is_in_yslice(left_plane, right_plane, vert1)) ? min_max(depthMinMax, vert1.z) : depthMinMax; 
	depthMinMax = (is_in_xslice(top_plane, bottom_plane, vert2) && is_in_yslice(left_plane, right_plane, vert2)) ? min_max(depthMinMax, vert2.z) : depthMinMax; 

	////////////////////////////////////////////////////////////////////////
	//Case where a vertex edge intersects a tile side is the min/max depth
	float lerp_val;
	
	//Left side
	depthMinMax = is_in_xslice(top_plane, bottom_plane, linesegment_vs_plane(vert0, vert1, left_plane, lerp_val) ? lerp(vert0, vert1, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert0.z, vert1.z, lerp_val)) : depthMinMax;
	depthMinMax = is_in_xslice(top_plane, bottom_plane, linesegment_vs_plane(vert1, vert2, left_plane, lerp_val) ? lerp(vert1, vert2, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert1.z, vert2.z, lerp_val)) : depthMinMax;
	depthMinMax = is_in_xslice(top_plane, bottom_plane, linesegment_vs_plane(vert2, vert0, left_plane, lerp_val) ? lerp(vert2, vert0, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert2.z, vert0.z, lerp_val)) : depthMinMax;

	//Right side
	depthMinMax = is_in_xslice(top_plane, bottom_plane, linesegment_vs_plane(vert0, vert1, right_plane, lerp_val) ? lerp(vert0, vert1, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert0.z, vert1.z, lerp_val)) : depthMinMax;
	depthMinMax = is_in_xslice(top_plane, bottom_plane, linesegment_vs_plane(vert1, vert2, right_plane, lerp_val) ? lerp(vert1, vert2, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert1.z, vert2.z, lerp_val)) : depthMinMax;
	depthMinMax = is_in_xslice(top_plane, bottom_plane, linesegment_vs_plane(vert2, vert0, right_plane, lerp_val) ? lerp(vert2, vert0, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert2.z, vert0.z, lerp_val)) : depthMinMax;

	//Bottom side
	depthMinMax = is_in_yslice(left_plane, right_plane, linesegment_vs_plane(vert0, vert1, bottom_plane, lerp_val) ? lerp(vert0, vert1, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert0.z, vert1.z, lerp_val)) : depthMinMax;
	depthMinMax = is_in_yslice(left_plane, right_plane, linesegment_vs_plane(vert1, vert2, bottom_plane, lerp_val) ? lerp(vert1, vert2, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert1.z, vert2.z, lerp_val)) : depthMinMax;
	depthMinMax = is_in_yslice(left_plane, right_plane, linesegment_vs_plane(vert2, vert0, bottom_plane, lerp_val) ? lerp(vert2, vert0, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert2.z, vert0.z, lerp_val)) : depthMinMax;

	//Top side
	depthMinMax = is_in_yslice(left_plane, right_plane, linesegment_vs_plane(vert0, vert1, top_plane, lerp_val) ? lerp(vert0, vert1, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert0.z, vert1.z, lerp_val)) : depthMinMax;
	depthMinMax = is_in_yslice(left_plane, right_plane, linesegment_vs_plane(vert1, vert2, top_plane, lerp_val) ? lerp(vert1, vert2, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert1.z, vert2.z, lerp_val)) : depthMinMax;
	depthMinMax = is_in_yslice(left_plane, right_plane, linesegment_vs_plane(vert2, vert0, top_plane, lerp_val) ? lerp(vert2, vert0, lerp_val) : float3(0, 0, -1)) ? min_max(depthMinMax, lerp(vert2.z, vert0.z, lerp_val)) : depthMinMax;

#ifdef LINEAR_DEPTH_DIST
	return is_front_face ? float2(1.0f, (CLUSTERSZ - 1.0f) / 255.0f - floor(max(CLUSTERSZ * (depthMinMax.y / FARZ), 0.0f)) / 255.0f)
	: float2(floor(max(CLUSTERSZ * (depthMinMax.x / FARZ), 0.0f)) / 255.0f, 1.0f);
#else
	// Look up the light list for the cluster
	const float min_depth = log2(NEAR_CLUST);
	const float max_depth = log2(FARZ);

	const float scale = 1.0f / (max_depth - min_depth) * (CLUSTERSZ - 1.0f);
	const float bias = 1.0f - min_depth * scale;

	//Wrong winding order on triangles, should be the other way around.
	return is_front_face ? float2(1.0f, (CLUSTERSZ - 1.0f) / 255.0f - floor(max(log2(depthMinMax.y) * scale + bias, 0.0f)) / 255.0f)
	: float2(floor(max(log2(depthMinMax.x) * scale + bias, 0.0f)) / 255.0f, 1.0f);
#endif
}
