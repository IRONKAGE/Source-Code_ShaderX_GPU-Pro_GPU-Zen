/**
 *
 *  This software module was originally developed for research purposes,
 *  by Multimedia Lab at Ghent University (Belgium).
 *  Its performance may not be optimized for specific applications.
 *
 *  Those intending to use this software module in hardware or software products
 *  are advized that its use may infringe existing patents. The developers of 
 *  this software module, their companies, Ghent Universtity, nor Multimedia Lab 
 *  have any liability for use of this software module or modifications thereof.
 *
 *  Ghent University and Multimedia Lab (Belgium) retain full right to modify and
 *  use the code for their own purpose, assign or donate the code to a third
 *  party, and to inhibit third parties from using the code for their products. 
 *
 *  This copyright notice must be included in all copies or derivative works.
 *
 *  For information on its use, applications and associated permission for use,
 *  please contact Prof. Rik Van de Walle (rik.vandewalle@ugent.be). 
 *
 *  Detailed information on the activities of
 *  Ghent University Multimedia Lab can be found at
 *  http://multimedialab.elis.ugent.be/.
 *
 *  Copyright (c) Ghent University 2004-2009.
 *
 **/

struct vsVertex {
    float2 physID : POSITION;
    float4 pageID : ATTR1;
};

struct gs2psVertex {
    float4 pos     : POSITION;
    float4 color   : TEXCOORD0;
};

//x: level we are rendering to, y: scale to get id's in 0-1 range
const uniform float2 LevelInfo : USERPARAMS;
static const int TextureSize = 15360;
static const float PageContentSize = 120;
static const float PagesOnAxis = TextureSize/PageContentSize;

vsVertex vertex_main(vsVertex i) {     
    return i;
} 

POINT TRIANGLE_OUT void geometry_main(AttribArray<vsVertex> inverts) {
    float4 pageID = inverts[0].pageID*255;
    float2 physID = inverts[0].physID;    
    int currentLevel = (int)LevelInfo.x;
    float levelScale = LevelInfo.y;
    
    int hi = (int)pageID.z;
    int hiX = (hi>>4)<<8;
    int hiY = (hi&0x0F)<<8;
    pageID.x += (float)hiX;
    pageID.y += (float)hiY;

    // Higher miplevels cover larger areas in the translation table
    float scale = (1<<((int)pageID.w-currentLevel));
    pageID.xy *= scale;
  
    gs2psVertex vert;
    //Write the physical page address and the mipmap level
    vert.color = float4(physID.x/255.0,physID.y/255.0,
    currentLevel/255.0,
    pageID.w/255.0);    
    
    //Generate a quad & range compress to normalized dev coords.
    vert.pos = float4(float2(pageID.x      ,pageID.y      )*levelScale*2-1,0.0,1.0); emitVertex(vert);
    vert.pos = float4(float2(pageID.x+scale,pageID.y      )*levelScale*2-1,0.0,1.0); emitVertex(vert);
    vert.pos = float4(float2(pageID.x      ,pageID.y+scale)*levelScale*2-1,0.0,1.0); emitVertex(vert);
    vert.pos = float4(float2(pageID.x+scale,pageID.y+scale)*levelScale*2-1,0.0,1.0); emitVertex(vert);
}

float4 fragment_main(gs2psVertex i) : COLOR {   
    return i.color;
} 

technique UberBasic
{
    pass P0
    {
        VertexProgram   = compile gp4vp vertex_main();
        FragmentProgram = compile gp4fp fragment_main();
        GeometryProgram = compile gp4gp geometry_main();

        BlendEnable    = false;
        CullFaceEnable = false;
    }
}
