/**
 *
 *  This software module was originally developed for research purposes,
 *  by Multimedia Lab at Ghent University (Belgium).
 *  Its performance may not be optimized for specific applications.
 *
 *  Those intending to use this software module in hardware or software products
 *  are advized that its use may infringe existing patents. The developers of 
 *  this software module, their companies, Ghent Universtity, nor Multimedia Lab 
 *  have any liability for use of this software module or modifications thereof.
 *
 *  Ghent University and Multimedia Lab (Belgium) retain full right to modify and
 *  use the code for their own purpose, assign or donate the code to a third
 *  party, and to inhibit third parties from using the code for their products. 
 *
 *  This copyright notice must be included in all copies or derivative works.
 *
 *  For information on its use, applications and associated permission for use,
 *  please contact Prof. Rik Van de Walle (rik.vandewalle@ugent.be). 
 *
 *  Detailed information on the activities of
 *  Ghent University Multimedia Lab can be found at
 *  http://multimedialab.elis.ugent.be/.
 *
 *  Copyright (c) Ghent University 2004-2009.
 *
 **/

//
// Klubnika cgfx standard library
//
//    DO NOT MODIFY: These are matched between c++ and cg code.
//

const uniform float4x4 ModelViewProjection : MODELVIEWPROJECTION;
const uniform float4x4 ModelToWorld        : MODELTOWORLD;
const uniform float4x4 WorldToModel        : WORLDTOMODEL;
const uniform float4x4 InvViewProjection   : INVVIEWPROJECTION;
const uniform float4x4 InvProjection       : INVPROJECTION;

const uniform float3   ModelCameraOrigin   : MODELCAMERAORIGIN;   //Model space camera origin
const uniform float3   ModelLightOrigin    : MODELLIGHTORIGIN;    //Model space light origin

const uniform float    FrameTime           : TIME;

// Declare this yourself in the type you need (till 16 floats)
//const uniform [tala]    UserParameters      : USERPARAMS;

struct klVertex {
    float4 xyz			: POSITION;
    float2 uv			: ATTR1;
    float4 color		: ATTR2;
    float3 tangent		: ATTR3;
    float3 binormal		: ATTR4;	
    float3 normal		: ATTR5;
};