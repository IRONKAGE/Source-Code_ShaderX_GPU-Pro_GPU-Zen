/**
 *
 *  This software module was originally developed for research purposes,
 *  by Multimedia Lab at Ghent University (Belgium).
 *  Its performance may not be optimized for specific applications.
 *
 *  Those intending to use this software module in hardware or software products
 *  are advized that its use may infringe existing patents. The developers of 
 *  this software module, their companies, Ghent Universtity, nor Multimedia Lab 
 *  have any liability for use of this software module or modifications thereof.
 *
 *  Ghent University and Multimedia Lab (Belgium) retain full right to modify and
 *  use the code for their own purpose, assign or donate the code to a third
 *  party, and to inhibit third parties from using the code for their products. 
 *
 *  This copyright notice must be included in all copies or derivative works.
 *
 *  For information on its use, applications and associated permission for use,
 *  please contact Prof. Rik Van de Walle (rik.vandewalle@ugent.be). 
 *
 *  Detailed information on the activities of
 *  Ghent University Multimedia Lab can be found at
 *  http://multimedialab.elis.ugent.be/.
 *
 *  Copyright (c) Ghent University 2004-2009.
 *
 **/

sampler2D image = sampler_state {
  generateMipMap = false;
  minFilter = Nearest;
  magFilter = Nearest;
};

struct vsVertex {
    float4 xyz   : POSITION;
    float2 uv    : TEXCOORD0;
};

vsVertex vertex_main(klVertex i) {     
	vsVertex o;
    o.xyz = i.xyz;
    o.uv = i.uv;
    return o;
} 

int ReverseBits(int a) {
    int r = 0;
    for ( int i=0;i<8;i++) {
        int mask = 1<<i;
        bool bit = (a&mask) != 0;
        if (bit) {
            mask = 1<<(7-i);
            r |= mask;
        }
    }
    return r;
}

float4 fragment_main(vsVertex i) : COLOR {
    float4 pageIdF = tex2D(image,i.uv);
    int4 pageId = (pageIdF*255.0f);
    return float4(ReverseBits(pageId.x),ReverseBits(pageId.y),ReverseBits(pageId.w),255.0)/255.0;
} 

technique Default {
    pass P0 {
        DepthTestEnable = false;
        VertexProgram   = compile gp4vp vertex_main();
        FragmentProgram = compile gp4fp fragment_main();
    }
}
