#ifndef D3D10DRV_FORMATHELEPRS_H_INCLUDED
#define D3D10DRV_FORMATHELEPRS_H_INCLUDED

#include "Wrap3D\Src\Format.h"
#include "Math\Src\Types.h"

namespace Mod
{
	template<typename T1, typename T2>
	void ConvertFunc( T2 src, void* dest );

	template<typename T1>
	void ConvertFunc_UnpackUNORM( float src, void* dest );

	template<typename T1>
	void ConvertFunc_UnpackSNORM( float src, void* dest );

	template <DXGI_FORMAT F>
	struct FormatTraits;

	template < typename T, UINT32 CC>
	struct DeriveFmtSpecificsHelper
	{
		typedef T Result;
	};

	template <typename T, typename U>
	struct DeriveFmtSpecifics
	{
		static const UINT32 ComponentCount = 1;
		typedef T CompType;
	};

	template <typename T>
	struct DeriveFmtSpecifics<T, typename DeriveFmtSpecificsHelper<T, T::COMPONENT_COUNT>::Result>
	{
		static const UINT32 ComponentCount = T::COMPONENT_COUNT;
		typedef typename T::comp_type CompType;
	};

#define DECLARE_DXGI_FORMAT_STRUCT(format, bit_count, type)											\
			template<>																				\
			struct FormatTraits<format>																\
			{																						\
				typedef type Type;																	\
				typedef DeriveFmtSpecifics<Type,Type>::CompType CompType;							\
				enum																				\
				{																					\
					BitCount = bit_count,															\
					Format = format,																\
					ComponentCount = DeriveFmtSpecifics<Type,Type>::ComponentCount					\
				};																					\
			};

DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32B32A32_TYPELESS,		4*32,		Math::int4		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32B32A32_FLOAT,			4*32,		Math::float4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32B32A32_UINT,			4*32,		Math::uint4		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32B32A32_SINT,			4*32,		Math::int4		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32B32_TYPELESS,			3*32,		Math::int3		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32B32_FLOAT,				3*32,		Math::float3	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32B32_UINT,				3*32,		Math::uint3		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32B32_SINT,				3*32,		Math::int3		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16B16A16_TYPELESS,		4*16,		Math::short4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16B16A16_FLOAT,			4*16,		Math::half4		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16B16A16_UNORM,			4*16,		Math::ushort4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16B16A16_UINT,			4*16,		Math::ushort4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16B16A16_SNORM,			4*16,		Math::short4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16B16A16_SINT,			4*16,		Math::short4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32_TYPELESS,				2*32,		Math::int2		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32_FLOAT,				2*32,		Math::float2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32_UINT,					2*32,		Math::uint2		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G32_SINT,					2*32,		Math::int2		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32G8X24_TYPELESS,			32+8+24,	Math::int2		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_D32_FLOAT_S8X24_UINT,		32+8+24,	Math::int2		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,	32+8+24,	Math::int2		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,		32+8+24,	Math::int2		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R10G10B10A2_TYPELESS,		10*3+2,		int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R10G10B10A2_UNORM,			10*3+2,		int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R10G10B10A2_UINT,			10*3+2,		int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R11G11B10_FLOAT,				11*2+10,	int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8B8A8_TYPELESS,			8*4,		Math::sbyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8B8A8_UNORM,				8*4,		Math::ubyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,			8*4,		Math::ubyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8B8A8_UINT,				8*4,		Math::ubyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8B8A8_SNORM,				8*4,		Math::sbyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8B8A8_SINT,				8*4,		Math::sbyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16_TYPELESS,				16*2,		Math::short2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16_FLOAT,				16*2,		Math::half2		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16_UNORM,				16*2,		Math::ushort2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16_UINT,					16*2,		Math::ushort2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16_SNORM,				16*2,		Math::short2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16G16_SINT,					16*2,		Math::short2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32_TYPELESS,				32,			int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_D32_FLOAT,					32,			float			)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32_FLOAT,					32,			float			)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32_UINT,					32,			Math::uint		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R32_SINT,					32,			int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R24G8_TYPELESS,				24+8,		int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_D24_UNORM_S8_UINT,			24+8,		int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R24_UNORM_X8_TYPELESS,		24+8,		int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_X24_TYPELESS_G8_UINT,		24+8,		int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8_TYPELESS,				8*2,		Math::sbyte2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8_UNORM,					8*2,		Math::ubyte2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8_UINT,					8*2,		Math::ubyte2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8_SNORM,					8*2,		Math::sbyte2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8_SINT,					8*2,		Math::sbyte2	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16_TYPELESS,				16,			short			)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16_FLOAT,					16,			Math::half		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_D16_UNORM,					16,			Math::ushort	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16_UNORM,					16,			Math::ushort	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16_UINT,					16,			Math::ushort	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16_SNORM,					16,			short			)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R16_SINT,					16,			short			)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8_TYPELESS,					8,			Math::sbyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8_UNORM,					8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8_UINT,						8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8_SNORM,					8,			Math::sbyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8_SINT,						8,			Math::sbyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_A8_UNORM,					8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R1_UNORM,					1,			Math::sbyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R9G9B9E5_SHAREDEXP,			9*3+5,		int				)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_R8G8_B8G8_UNORM,				8*4,		Math::ubyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_G8R8_G8B8_UNORM,				8*4,		Math::ubyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC1_TYPELESS,				4,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC1_UNORM,					4,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC1_UNORM_SRGB,				4,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC2_TYPELESS,				8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC2_UNORM,					8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC2_UNORM_SRGB,				8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC3_TYPELESS,				8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC3_UNORM,					8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC3_UNORM_SRGB,				8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC4_TYPELESS,				8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC4_UNORM,					8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC4_SNORM,					8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC5_TYPELESS,				8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC5_UNORM,					8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_BC5_SNORM,					8,			Math::ubyte		)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_B5G6R5_UNORM,				5+6+5,		Math::ushort	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_B5G5R5A1_UNORM,				5*3+1,		Math::ushort	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_B8G8R8A8_UNORM,				8*4,		Math::ubyte4	)
DECLARE_DXGI_FORMAT_STRUCT(DXGI_FORMAT_B8G8R8X8_UNORM,				8*4,		Math::ubyte4	)

}

#endif