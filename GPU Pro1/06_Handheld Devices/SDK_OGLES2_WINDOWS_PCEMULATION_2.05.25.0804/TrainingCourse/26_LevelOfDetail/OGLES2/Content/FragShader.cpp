// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: FragShader.fsh ********

// File data
static const char _FragShader_fsh[] = 
	"uniform sampler2D  sReflectTex;\r\n"
	"uniform sampler2D  sNormalMap;\r\n"
	"\r\n"
	"uniform bool  bHighDetail;\r\n"
	"\r\n"
	"varying mediump vec3  EyeDirection;\r\n"
	"varying mediump vec2  TexCoord;\r\n"
	"\r\n"
	"void main()\r\n"
	"{\r\n"
	"\tif (bHighDetail)\r\n"
	"\t{\r\n"
	"\t\t// Get the normal direction per pixel from the normal map\r\n"
	"\t\t// The tNormal vector is defined in surface local coordinates (tangent space).\r\n"
	"\t\tmediump vec3 normal = texture2D(sNormalMap, TexCoord).rgb * 2.0 - 1.0;\r\n"
	"\t\t\r\n"
	"\t\t// reflect(): For the incident vector I and surface orientation N, returns the reflection direction:\r\n"
	"\t\t// I - 2 * dot(N, I) * N, N must already be normalized in order to achieve the desired result.\r\n"
	"\t\tmediump vec3 reflectDir = reflect(normal, EyeDirection);\r\n"
	"\t\tmediump vec2 reflectCoord = (reflectDir.xy) * 0.5 + 0.5;\r\n"
	"\t\r\n"
	"\t\t// Look-up in the 2D texture using the normal map disturbance\r\n"
	"\t\tgl_FragColor = texture2D(sReflectTex, reflectCoord);\r\n"
	"\t}\r\n"
	"\telse\r\n"
	"\t{\r\n"
	"\t\tgl_FragColor = texture2D(sReflectTex, TexCoord);\r\n"
	"\t}\r\n"
	"}\r\n";

// Register FragShader.fsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_FragShader_fsh("FragShader.fsh", _FragShader_fsh, 949);

// ******** End: FragShader.fsh ********

// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: FragShader.fsc ********

// File data
A32BIT _FragShader_fsc[] = {
0x10fab438,0xb370ab5a,0x30050100,0x2101,0xa9142cc2,0x0,0x0,0xfc060000,0x1000000,0x4000000,0x0,0x18000000,0x203,0x0,0x2020000,0x0,0x0,0xea020000,0x55535020,0x17,0x2de,0x1,0x0,0x848,0x0,0x2,0x79,0x0,0x8,0x0,0xffffffff,0x0,0x770009,0xffff,0x10004,0x0,0x50003,0x0,0x0,0x0,0x0,0xfffc0000,0x20003,0x10004,0x0,0x20000,0xffffffff,0x40001,0x40000,0x10000,0x20003,0x0,0x2,0x0,0x20001,0x0,0x20002,0x0,0x30002,0x100000,0x1,0x1,0x70003,0x2,
0xb0003,0x3,0xa180060c,0x40801ffe,0x4,0x20002,0x20000,0x80010002,0x80018001,0x8001,0x0,0x40000,0x1000000,0x0,0x530fd10,0x1281d000,0x348a9,0x0,0x400000,0x3fd00,0x5,0x20001,0x80018001,0x80018001,0x0,0x0,0x4,0x70007,0x3060a,0x30003,0x20003,0x20002,0x40002,0x40004,0x4,0x20001,0x10003,0x20001,0x20002,0x70000,0x80010002,0x80018001,0x8001,0x0,0x40000,0x40004,0x40004,0x40004,0xe0600600,0x28011002,0xb850c14b,0xc800081e,0xa0064102,0x40001f7c,0xa0640100,0x40011fbe,0x80202040,0x10601002,0xa0308182,0x401006,0xd0406930,0x411006,0x2,0x20002,
0x80004089,0x80018001,0x0,0x0,0x40004,0x89000101,0xfa100008,0x8000a040,0x601086,0x2,0x20002,0x80018001,0x80008000,0x0,0x0,0x40004,0x1010000,0xfa100000,0xf00069d3,0x601006,0x5,0x20000,0x80018001,0x80008000,0x0,0x0,0x10000,0xf000f,0x3060a,0x30003,0x30003,0x30003,0x40003,0x40004,0x4,0x20001,0x10003,0x1,0x1404a000,0x3e003,0x0,0x400000,0x4f800,0x4,0x50003,0x10000,0x80010002,0x80018001,0x8001,0x0,0x0,0xf0001,0x60a000f,0x30003,0x30003,0x30003,0x30003,0x40004,0x40004,0x10000,0x30002,0x10001,0x20002,0x4,
0x20004,0x20000,0x80010002,0x80018001,0x8001,0x0,0x40000,0x1010012,0x101,0x180fa10,0x1002a040,0x62881,0x0,0x50202403,0x175553,0x3180000,0x10000,0x0,0x9480000,0x0,0x20000,0x790000,0x0,0x80000,0x0,0xffff0000,0xffff,0x90000,0xffff0077,0x40000,0x3,0x30000,0x5,0x0,0x0,0x0,0x0,0x1fffc,0x40000,0x1,0x0,0xffff0002,0x1ffff,0x4,0x4,0x30001,0x2,0x20000,0x0,0x10000,0x2,0x20000,0x2,0x20000,0x3,0x10010,0x10000,0x30000,0x20007,0x30000,0x3000b,0x60c0000,0x1ffea180,0x44080,
0x20000,0x2,0x20002,0x80018001,0x80018001,0x0,0x0,0x4,0x100,0xfd100000,0xd0000530,0x48a91281,0x3,0x0,0xfd000040,0x50003,0x10000,0x80010002,0x80018001,0x8001,0x0,0x40000,0x70000,0x60a0007,0x30003,0x30003,0x20002,0x20002,0x40004,0x40004,0x10000,0x30002,0x30001,0x20002,0x2,0x20004,0x80018001,0x80018001,0x0,0x0,0x40004,0x40004,0xe0000600,0x28011000,0xb810014b,0xc8000818,0x464000,0x40001f7c,0x20240000,0x40011fbc,0x2,0x20002,0x80018000,0x80018001,0x0,0x0,0x40004,0x10101,0xfa100000,0x80002044,0x10601000,0x2,0x20004,0x80004044,
0x80018001,0x0,0x0,0x40004,0x40004,0x44000101,0xfa100008,0x108080,0x401004,0xd0202930,0x411000,0x80006044,0x601080,0x2,0x20002,0x80018001,0x80008000,0x0,0x0,0x40004,0x1010000,0xfa100000,0xf00029d3,0x601000,0x5,0x20000,0x80018001,0x80008000,0x0,0x0,0x10012,0xf000f,0x1060a,0x10001,0x1,0x0,0x40000,0x40004,0x4,0x20001,0x10003,0x3,0x1400a000,0x3e003,0x0,0x400000,0x4f800,0x4,0x50003,0x10000,0x80010002,0x80018001,0x8001,0x0,0x0,0xf0001,0x60a000f,0x30003,0x30003,0x30003,0x30003,0x40004,0x40004,0x10000,
0x30002,0x30001,0x20002,0x2,0x20001,0x80018001,0x80018001,0x0,0x0,0x1800012,0x1000a000,0x42881,0x40000,0x2,0x1,0x80018001,0x80018001,0x0,0x0,0x1010004,0x101,0x6fa10,0xc000000,0x0,0x0,0x40,0x3f,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x803f,0x48620500,0x44686769,0x69617465,0x6c,0x30a,0x1000001,0x10000,0x73000001,0x6d726f4e,0x614d6c61,0x70,0x318,0x2000001,0x10000,0x54000001,0x6f437865,0x64726f,0x5030000,0x10000,0x4000100,0x30002,0x65794500,0x65726944,0x6f697463,0x6e,0x504,0x1000001,0x30000,0x73000007,
0x6c666552,0x54746365,0x7865,0x31800,0x100,0x1010002,0x100,0x0,
};

// Register FragShader.fsc in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_FragShader_fsc("FragShader.fsc", _FragShader_fsc, 1820);

// ******** End: FragShader.fsc ********

