// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: VertShader.vsh ********

// File data
static const char _VertShader_vsh[] = 
	"/****************************************************************************\r\n"
	"* Vertex Shader\r\n"
	"* This code is for educational purposes, not optimized for performance.\r\n"
	"* For best performance, use different shaders for different light setups \r\n"
	"* and calculate lighting in model space.\r\n"
	"*\r\n"
	"* The use of several complex lights might significantly affect performance \r\n"
	"* on some mobile platforms.\r\n"
	"*\r\n"
	"* For fast transformation and lighting code, please see FastTnL example.\r\n"
	"*****************************************************************************/\r\n"
	"\r\n"
	"attribute highp vec3  inVertex; \r\n"
	"attribute highp vec3  inNormal;\r\n"
	"attribute highp vec2  inTexCoord;\r\n"
	"\r\n"
	"uniform highp mat4  MVPMatrix;\r\n"
	"uniform highp mat4  ModelView;\r\n"
	"uniform highp mat3  ModelViewIT;\r\n"
	"uniform lowp  int   iLightSel;\r\n"
	"uniform highp vec3  LightPosition;\r\n"
	"uniform highp vec3  LightDirection;\r\n"
	"uniform lowp  vec3  LightColor;\r\n"
	"\r\n"
	"varying mediump vec2  TexCoord;\r\n"
	"varying lowp    vec3  DiffuseLight;\r\n"
	"varying lowp    vec3  SpecularLight;\r\n"
	"\r\n"
	"const highp float  cShininess = 16.0;\r\n"
	"const highp float  cSpotCutoff = 0.9; \r\n"
	"const highp float  cSpotExp = 40.0;\r\n"
	"\r\n"
	"// General Blinn-Phong lighting function\r\n"
	"//\r\n"
	"// Calculated light is added to the varyings DiffuseLight and SpecularLight\r\n"
	"//\r\n"
	"void Lighting(bool bSpecular, highp vec3 normal, highp vec3 eyeDir, highp vec3 lightDir, lowp vec3 lightColor)\r\n"
	"{\r\n"
	"\tlowp float NdotL = max(dot(normal, lightDir), 0.0);\r\n"
	"\tDiffuseLight += NdotL * lightColor;\r\n"
	"\t\r\n"
	"\tif (bSpecular && NdotL > 0.0)\r\n"
	"\t{\r\n"
	"\t\thighp vec3 halfVector = normalize(lightDir + eyeDir);\r\n"
	"\t\thighp float NdotH = max(dot(normal, halfVector), 0.0);\t\t\r\n"
	"\t\thighp float specular = pow(NdotH, cShininess);\r\n"
	"\t\tSpecularLight += specular * lightColor;\r\n"
	"\t}\t\r\n"
	"}\r\n"
	"\r\n"
	"void DirectionalLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\r\n"
	"{\r\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\r\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\r\n"
	"\t\r\n"
	"\tLighting(bSpecular, normal, eyeDir, LightDirection, LightColor);\r\n"
	"}\r\n"
	"\r\n"
	"void PointLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\r\n"
	"{\r\n"
	"\t// calculate normalized light direction\r\n"
	"\thighp vec3 lightDir = -normalize(vertexPos - LightPosition);\r\n"
	"\t\r\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\r\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\r\n"
	"\t\r\n"
	"\tLighting(bSpecular, normal, eyeDir, lightDir, LightColor);\r\n"
	"}\r\n"
	"\r\n"
	"void SpotLight(bool bSpecular, highp vec3 normal, highp vec3 vertexPos)\r\n"
	"{\r\n"
	"\t// calculate normalized light direction\r\n"
	"\thighp vec3 lightDir = -normalize(vertexPos - LightPosition);\r\n"
	"\t\r\n"
	"\t// eye direction is the normalized inverse of the vertex position in eye space\r\n"
	"\thighp vec3 eyeDir = -normalize(vertexPos);\r\n"
	"\t\r\n"
	"\t// LightDirection is spot direction here\r\n"
	"\thighp float spotDot = dot(lightDir, LightDirection);\r\n"
	"\thighp float attenuation = 0.0;\r\n"
	"\tif (spotDot > cSpotCutoff)\r\n"
	"\t{\r\n"
	"\t\tattenuation = pow(spotDot, cSpotExp);\r\n"
	"\t}\r\n"
	"\t\r\n"
	"\tLighting(bSpecular, normal, eyeDir, lightDir, attenuation * LightColor);\r\n"
	"}\r\n"
	"\r\n"
	"void main()\r\n"
	"{\r\n"
	"\t// transform normal to eye space\r\n"
	"\thighp vec3 normal = normalize(ModelViewIT * inNormal);\r\n"
	"\t\r\n"
	"\t// transform vertex position to eye space\r\n"
	"\thighp vec3 ecPosition = vec3(ModelView * vec4(inVertex, 1.0));\r\n"
	"\t\r\n"
	"\t// initalize light intensity varyings\r\n"
	"\tDiffuseLight = vec3(0.0);\r\n"
	"\tSpecularLight = vec3(0.0);\r\n"
	"\t\r\n"
	"\t// select the light function\r\n"
	"\tif (iLightSel == 0)\t\t\tDirectionalLight(false, normal, ecPosition);\r\n"
	"\telse if (iLightSel == 1)\tDirectionalLight(true, normal, ecPosition);\r\n"
	"\telse if (iLightSel == 2)\tPointLight(false, normal, ecPosition);\r\n"
	"\telse if (iLightSel == 3)\tPointLight(true, normal, ecPosition);\r\n"
	"\telse if (iLightSel == 4)\tSpotLight(false, normal, ecPosition);\r\n"
	"\telse \t\t\t\t\t\tSpotLight(true, normal, ecPosition);\r\n"
	"\t\r\n"
	"\t// Transform position\r\n"
	"\tgl_Position = MVPMatrix * vec4(inVertex, 1.0);\r\n"
	"\t\r\n"
	"\t// Pass through texcoords\r\n"
	"\tTexCoord = inTexCoord;\r\n"
	"}";

// Register VertShader.vsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_VertShader_vsh("VertShader.vsh", _VertShader_vsh, 3859);

// ******** End: VertShader.vsh ********

// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: VertShader.vsc ********

// File data
A32BIT _VertShader_vsc[] = {
0x10fab438,0xfd6bc20a,0x30050100,0x2101,0xa9142cc2,0x0,0x0,0x3b100000,0x0,0x4000000,0x0,0x39000000,0x20303,0x0,0x1010000,0x2,0x0,0xe20c0000,0x55535020,0x17,0xcd6,0x1,0x0,0x80c,0x4,0x2,0x79,0x0,0x8,0x0,0xffffffff,0x0,0x76000a,0xffff,0x1b000a,0x0,0x390000,0x0,0x0,0x0,0x0,0xfffc0000,0x0,0x0,0x0,0xa0000,0xffffffff,0x360003,0x2000a,0x2a,0x20000,0x2b,0x30010,0x1005c,0x30014,0x1005d,0x3000a,0x1005e,0x10000,0x20058,0x10000,0x30059,0x10000,0x4005a,
0x10000,0x50060,0x10000,0x60061,0x10000,0x70062,0x10000,0x80000,0x10000,0x90001,0x10000,0xa0002,0x10000,0xb0004,0x10000,0xc0005,0x10000,0xd0006,0x10000,0xe0008,0x10000,0xf0009,0x10000,0x10000a,0x10000,0x110010,0x10000,0x120011,0x10000,0x130012,0x10000,0x140014,0x10000,0x150015,0x10000,0x160016,0x10000,0x170018,0x10000,0x180019,0x10000,0x19001a,0x10000,0x1a001c,0x10000,0x1b001d,0x10000,0x1c001e,0x20000,0x1d003a,0x20000,0x1d003b,0x20010,0x1e003e,0x20000,0x1e003f,0x20010,0x1f0042,0x20000,0x1f0043,0x10010,0x200044,0x10000,0x210045,
0x10000,0x220046,0x10000,0x230047,0x10000,0x240048,0x10000,0x250049,0x10000,0x26004a,0x10000,0x27004b,0x10000,0x28004c,0x10000,0x29004d,0x10000,0x2a004e,0x10000,0x2b004f,0x10000,0x2c0050,0x10000,0x2d0051,0x10000,0x2e0052,0x10000,0x2f0053,0x10000,0x300064,0x10000,0x310065,0x40000,0x0,0x32,0xa7a60580,0x40811fbe,0xa7c50580,0x40811fbe,0xa7e40580,0x40811fbe,0x377,0x4,0x20001,0x10000,0x80010003,0x80008001,0x8001,0x0,0x40000,0x2400000,0xf8000100,0x2,0x30005,0x80018001,0x80018000,0x0,0x0,0x0,0x0,0x2850000,0x14020001,0x83000080,0x10022001,
0x80,0x12008000,0x80300880,0x10021001,0x1a300081,0x108451e0,0x20083,0x50000,0x80010003,0x80018001,0x8001,0x0,0x40000,0x0,0x10000,0x1010101,0xfa100000,0xe1200600,0x28a12000,0xe1000580,0x28811000,0x205,0x38ab0602,0x51bf1a30,0xa31080,0x3,0x0,0xf8000240,0x20002,0x10000,0x80000000,0x80008000,0x8000,0x0,0x40000,0x900,0xf80000c0,0x3,0x0,0xf8000080,0x4ffff,0x30000,0x2,0x30001,0x80018001,0x80018000,0x0,0x4f0000,0x4,0x10002e0,0x2f800,0x120000,0x80010003,0x80008001,0x8001,0x0,0x40000,0x0,0x0,0x10000,0x10000,0x10000,0x10001,0x10001,
0x10001,0x1,0x0,0x285fb10,0x14020001,0x83000080,0x10022001,0x80,0x12028000,0x5800880,0x1000e100,0x48002881,0x222e041,0x5a3038ab,0x108051df,0x88800083,0x220e0e1,0x5a3038ab,0x108051ff,0x7800083,0x622e001,0x5a3038af,0x108051bf,0x1020083,0x1402a03f,0xc3810080,0x10022021,0x800080,0x12028020,0xc0b00880,0x10029001,0x1a300081,0x10845160,0x5e020083,0x6062000,0x1a3038ab,0x1080513f,0x300a3,0x0,0x2400000,0x2f800,0x2,0x1,0x80008000,0x80008000,0x0,0x0,0xb800004,0xc00000,0x3f800,0x0,0x800000,0xfffff800,0x4,0x20004,0x10000,0x80010003,0x80008001,0x8001,0x0,0x4004f,0x3000000,0xf8000100,0x2,
0x30012,0x80018001,0x80018000,0x0,0x0,0x4,0x0,0x0,0x1,0x1,0x10001,0x10001,0x10001,0x10001,0x0,0xfb100000,0x10285,0x801402,0x20018300,0x801002,0x80000000,0x8801202,0x61001800,0x28831000,0xe0e14800,0x38ab0222,0x51df5a30,0x831080,0xe0418880,0x38ab0222,0x51ff5a30,0x831080,0xe0010780,0x38af0622,0x51bf5a30,0x831080,0xa01f0387,0x801402,0xa0008100,0x801006,0x80200000,0x8801202,0x900080b0,0x811006,0x51601a30,0x831084,0x20005e07,0x38ab0606,0x513f1a30,0xa31080,0x2,0x30003,0x80018000,0x80018001,0x0,0x0,0x4,0x1010000,0x1,0x48cfa10,0x20023000,0x803a10a0,0x1a81b003,0x34888,
0x0,0x400000,0x6fd00,0x2,0x30003,0x80018000,0x80018001,0x0,0x0,0x0,0x0,0x14428000,0x1db00880,0x1006d000,0x81,0x16008100,0x40880,0x60000,0x2,0x30004,0x80018000,0x80018001,0x0,0x0,0x0,0x1,0xd0221fb0,0x811002,0xf0021ebe,0x38ab0602,0xf1040001,0x40831dfc,0xa1040080,0x40811dc4,0x3,0x0,0xf8000240,0x20002,0x10000,0x80000000,0x80008000,0x8000,0x0,0x40000,0xc00,0xf80000c0,0x3,0x0,0xf8000080,0x4ffff,0x20000,0x2,0xe,0x80e88000,0x800180e8,0x0,0x0,0x4,0x0,0x10000,0x10001,0x10001,0x10001,0x10001,
0xe8e801,0xfa100000,0xd09,0x10a01002,0x2020c580,0x801002,0x900000b0,0x18811202,0xa0440000,0x408a1dff,0x60040200,0x40811dfe,0x60040280,0x40811dca,0x60040300,0x40811dc6,0x38102442,0xc8810816,0xa0860000,0x40811fbd,0xa0a50000,0x40811fbd,0xa0c40000,0x40811fbd,0x10000cb0,0x48891281,0x7009d842,0x498f1ab1,0x3,0x0,0xfd000040,0x20008,0x1a0000,0x80010000,0x80008001,0x8001,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x10000,0x0,0x0,0x10000,0x101,0x5a0dfa10,0x20024022,0x410200a2,0x1406a000,0xc1800080,0x1006a000,0x80,0x12028000,0xc0300880,0x10069060,0x44080081,0x1f7c0006,
0x4004080,0x1fbe20e4,0x3804081,0x1dfc6024,0x4004081,0x1dc86024,0x4804081,0x1dc46024,0x824081,0x606a000,0x8d0038ab,0xc0022020,0xc18138a0,0x1002a020,0xb00080,0x12029000,0x1881,0x14428000,0x3b00880,0x10065000,0x83,0x16028000,0x3b00880,0x10069020,0x20410081,0x6060000,0x138ab,0x1dfef004,0x804083,0x1dc6a004,0x20c04081,0xf0022800,0x9180,0x1fbda0e6,0x4081,0x1fbda105,0x4081,0x1fbda124,0x44081,0x80000,0x2,0x1,0x80018001,0x80018001,0x0,0x0,0x1010004,0x101,0x3fa10,0x0,0x800000,0xfffff800,0x4,0x2000a,0x10000,0x80000003,0x80008000,0x8000,0x0,0x40000,0x101,0xfd100000,0x2,0x30003,
0x80038000,0x80018003,0x0,0x0,0x4,0x3010000,0x3,0xa00fa10,0x2002e0e0,0xe8410a0,0x2002e060,0x210a0,0x150000,0x80010003,0x80008001,0x8001,0x0,0x40000,0x0,0x0,0x0,0x0,0x10000,0x10001,0x10001,0x10001,0x10001,0x10001,0x1010001,0xfa100000,0x70c0da26,0x821004,0x60861800,0x408311bd,0x60a51800,0x408311bd,0x60c41800,0x408311bd,0x60e61800,0x408311bd,0x61051800,0x408311bd,0x61241800,0x408311bd,0xd0002ab0,0x488d1181,0xf0000913,0x38ab0606,0xf0004a96,0x38820606,0xf0008c19,0x38820606,0xf01f0081,0x831402,0xa001c380,0x801006,0x80000000,0x8801202,0x9061c030,0x811004,0xb340003c,0x38a9c204,0xf0410d9c,0x38980604,
0xf0014f1f,0x38820606,0xf00190a2,0x38820606,0x709f1a24,0xa21000,0x3,0x0,0xfd000040,0x2000b,0x10000,0x80010003,0x80008001,0x8001,0x0,0x0,0x63201800,0x28831000,0x3,0x0,0xf8000240,0x30001,0x0,0x400000,0xcf800,0x4,0x2000b,0x10000,0x80010003,0x80008001,0x8001,0x0,0x0,0xd003aab4,0x488d1181,0x3,0x0,0xfd000040,0x2000d,0x10000,0x80010003,0x80008001,0x8001,0x0,0x0,0x63201a00,0x28831000,0x3,0x0,0xf8000240,0x30001,0x0,0x400000,0xef800,0x4,0x2000d,0x20000,0x80010003,0x80008001,0x8001,0x0,0x4004f,0x4f0000,0x0,
0xaac0fb10,0x1181f003,0x3488c,0x0,0x400000,0xffd00,0x2,0x30001,0x80018001,0x80018000,0x0,0x4f0000,0x18000000,0x10006320,0x32883,0x0,0x2400000,0x3f800,0x3,0x0,0xf8000040,0x40010,0xf0000,0x2,0x30001,0x80018001,0x80018000,0x0,0x4f0000,0xaac20000,0x1181f003,0x3488c,0x0,0x400000,0x11fd00,0x2,0x30001,0x80018001,0x80018000,0x0,0x4f0000,0x1a000000,0x10006320,0x32883,0x0,0x2400000,0x3f800,0x3,0x0,0xf8000040,0x40012,0x110000,0x2,0x30001,0x80018001,0x80018000,0x0,0x4f0000,0xaac40000,0x1181f003,0x3488c,0x0,0x400000,0x13fd00,
0x2,0x30001,0x80018001,0x80018000,0x0,0x4f0000,0x18000000,0x10006320,0x32883,0x0,0x2400000,0x4f800,0x3,0x0,0xf8000040,0x40014,0x130000,0x2,0x30001,0x80018001,0x80018000,0x0,0x4f0000,0x1a000000,0x10006320,0x32883,0x0,0x2400000,0x4f800,0x4,0x40014,0x120000,0x4,0x40010,0xe0000,0x4,0x2000c,0x10000,0x80010003,0x80018001,0x8001,0x0,0x0,0xa1400400,0x28a11001,0x2,0x30009,0x80018001,0x80018001,0x0,0x0,0x4,0x10001,0x1,0x10001,0x1,0x0,0x152bfb10,0x606f001,0x572f38ab,0x606f001,0x99333882,0x606f001,0x1a363882,
0x1001701f,0x162d00a2,0x606f001,0x583138ab,0x606f001,0x9a353882,0x606f001,0x1a383882,0x1001705f,0x600a2,0x68000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x803f,0x0,0x0,0x8041,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x803f,0x0,0x0,0x0,
0x0,0x0,0x803f,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x4040,0x0,0x0,0x0,0x8040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6666663f,0x2042,0x0,0x0,0x6f4d0e00,0x566c6564,0x49776569,0x54,0x312,0x1000001,0x70c0000,0x69000077,0x726f4e6e,0x6c616d,0x4040000,0x10000,0x100,
0x70004,0x566e6900,0x65747265,0x78,0x404,0x1000001,0x40400,0x4d000007,0x6c65646f,0x77656956,0x16000000,0x1000003,0x10000,0xffff1010,0x69440000,0x73756666,0x67694c65,0x7468,0x50400,0x100,0x3000001,0x700,0x63657053,0x72616c75,0x6867694c,0x74,0x504,0x1000001,0x30400,0x69000007,0x6867694c,0x6c655374,0x6000000,0x1000003,0x10000,0x100042b,0x6c670000,0x736f505f,0x6f697469,0x100006e,0x505,0x1000001,0x40000,0x4d00000f,0x614d5056,0x78697274,0x16000000,0x1000003,0x10000,0xffff1044,0x65540000,0x6f6f4378,0x6472,0x50300,0x100,0x2080001,0x300,0x65546e69,0x6f6f4378,0x6472,0x40300,0x100,0x4080001,0x300,
0x6867694c,0x72694474,0x69746365,0x6e6f,0x30400,0x100,0x3580001,0x700,0x6867694c,0x6c6f4374,0x726f,0x30400,0x100,0x45c0001,0x700,0x6867694c,0x736f5074,0x6f697469,0x6e,0x304,0x1000001,0x36000,0x7,
};

// Register VertShader.vsc in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_VertShader_vsc("VertShader.vsc", _VertShader_vsc, 4187);

// ******** End: VertShader.vsc ********

