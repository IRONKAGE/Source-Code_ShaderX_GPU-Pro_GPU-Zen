// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: FragShader.fsh ********

// File data
static const char _FragShader_fsh[] = 
	"uniform sampler2D  sBaseTex;\r\n"
	"uniform sampler2D  sNormalMap;\r\n"
	"\t\t\r\n"
	"varying lowp    vec3  LightVec;\r\n"
	"varying mediump vec2  TexCoord;\r\n"
	"\r\n"
	"void main()\r\n"
	"{\r\n"
	"\t// read the per-pixel normal from the normal map and expand to [-1, 1]\r\n"
	"\tlowp vec3 normal = texture2D(sNormalMap, TexCoord).rgb * 2.0 - 1.0;\r\n"
	"\t\r\n"
	"\t// linear interpolations of normals may cause shortened normals and thus\r\n"
	"\t// visible artifacts on low-poly models.\r\n"
	"\t// We omit the normalization here for performance reasons\r\n"
	"\t\r\n"
	"\t// calculate diffuse lighting as the cosine of the angle between light\r\n"
	"\t// direction and surface normal (both in surface local/tangent space)\r\n"
	"\t// We don't have to clamp to 0 here because the framebuffer write will be clamped\r\n"
	"\tlowp float lightIntensity = dot(LightVec, normal);\r\n"
	"\r\n"
	"\t// read base texture and modulate with light intensity\r\n"
	"\tlowp vec3 texColor = texture2D(sBaseTex, TexCoord).rgb;\t\r\n"
	"\tgl_FragColor = vec4(texColor * lightIntensity, 1.0);\r\n"
	"}\r\n";

// Register FragShader.fsh in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_FragShader_fsh("FragShader.fsh", _FragShader_fsh, 935);

// ******** End: FragShader.fsh ********

// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: FragShader.fsc ********

// File data
A32BIT _FragShader_fsc[] = {
0x10fab438,0x281d9633,0x30050100,0x2101,0xa9142cc2,0x0,0x0,0x26040000,0x1000000,0x4000000,0x0,0x18000000,0x203,0x0,0x2010000,0x0,0x0,0xb6010000,0x55535020,0x17,0x1aa,0x1,0x0,0x848,0x0,0x2,0x79,0x0,0x8,0x0,0xffffffff,0x0,0x770009,0xffff,0x3,0x0,0x10003,0x0,0x0,0x0,0x0,0xfffc0000,0x10003,0x10004,0x0,0x20000,0xffffffff,0x10001,0x60000,0x10000,0x30003,0x0,0x2,0x0,0x20001,0x0,0x30003,0x0,0xa1200489,0x40801ffe,0x4,0x20002,0x10000,0x80010002,
0x80018001,0x8001,0x0,0x40000,0x100,0xfd100000,0x5,0x20001,0x80018001,0x80018001,0x0,0x0,0x0,0x70007,0x3060a,0x30003,0x10003,0x10001,0x40001,0x40004,0x4,0x20001,0x10003,0x20000,0x20002,0x20000,0x80010002,0x80018001,0x8001,0x0,0x0,0x64b80000,0x9306d820,0x20418891,0x603a000,0x5c088,0x10000,0x80010002,0x80018001,0x8001,0x0,0x10000,0x70001,0x60a0007,0x30003,0x30003,0x20002,0x20002,0x40004,0x40004,0x10000,0x30002,0x1,0x20002,0x2,0x20001,0x80018001,0x80018001,0x0,0x0,0x1c020013,0x1802603f,0x689a2,0x0,
0x5020b601,0x175553,0x1aa0000,0x10000,0x0,0x9480000,0x0,0x20000,0x790000,0x0,0x80000,0x0,0xffff0000,0xffff,0x90000,0xffff0077,0x30000,0x1,0x30000,0x1,0x0,0x0,0x0,0x0,0x1fffc,0x40000,0x1,0x0,0xffff0002,0x1ffff,0x1,0x4,0x30001,0x3,0x20000,0x0,0x10000,0x2,0x30000,0x3,0x4890000,0x1ffea120,0x44080,0x20000,0x2,0x20001,0x80018001,0x80018001,0x0,0x0,0x1000004,0x0,0x5fd10,0x10000,0x80010002,0x80018001,0x8001,0x0,0x0,0x70000,0x60a0007,0x30003,0x30003,0x10001,
0x10001,0x40004,0x40004,0x10000,0x30002,0x10001,0x20002,0x2,0x20002,0x80018001,0x80018001,0x0,0x0,0x0,0xd80064b8,0x88919304,0x80002040,0xc0880603,0x5,0x20001,0x80018001,0x80018001,0x0,0x0,0x10001,0x70007,0x3060a,0x30003,0x20003,0x20002,0x40002,0x40004,0x4,0x20001,0x10003,0x20001,0x20002,0x10000,0x80010002,0x80018001,0x8001,0x0,0x130000,0x601f1c02,0x89a21800,0x6,0x800,0x0,0x0,0x400000,0x0,0x0,0x0,0x803f0000,0x4000000,0x726f4e73,0x4d6c616d,0x7061,0x31800,0x100,0x1000002,0x100,0x43786554,0x64726f6f,
0x3000000,0x1000005,0x10000,0x3000204,0x694c0000,0x56746867,0x6365,0x50400,0x100,0x3000001,0x700,0x73614273,0x78655465,0x18000000,0x1000003,0x20000,0x1000101,0x0,
};

// Register FragShader.fsc in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_FragShader_fsc("FragShader.fsc", _FragShader_fsc, 1094);

// ******** End: FragShader.fsc ********

