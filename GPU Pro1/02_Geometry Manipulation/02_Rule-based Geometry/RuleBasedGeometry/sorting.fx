/*
**********************************************************************
 * Demo program for
 * Rule-based Geometry Synthesis in Real-time
 * ShaderX 8 article.
 *
 * @author: Milan Magdics
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted for any non-commercial programs.
 * 
 * Use it for your own risk. The author(s) do(es) not take
 * responsibility or liability for the damages or harms caused by
 * this software.
**********************************************************************
*/

#ifndef __SORTING_H
#define __SORTING_H

#include "modules.fx"

//**************************************************************************
// SORTING PHASE
// 
// sorts the modules generated by the generation step into instancing types
//**************************************************************************

IDType minID, maxID;

Module vsSort( Module module )
{
	return module;
};

[maxvertexcount(1)]
void gsSort(point Module input[1], inout PointStream<sortedModule> stream)
{
	// minID and maxID are set by the CPU code in every step
   if ( (minID <= input[0].symbolID) && (input[0].symbolID <= maxID) )
      // unused attributes are removed, rest are simply copied
      stream.Append(convertToSorted(input[0]));

}

DepthStencilState DisableDepthTestWrite
{
    DepthEnable = FALSE;
    DepthWriteMask = ZERO;
};

technique10 sortModules
{
    pass P0
    {
        SetVertexShader ( CompileShader( vs_4_0, vsSort() ) );
        SetGeometryShader( 
			ConstructGSWithSO( CompileShader( gs_4_0, gsSort()), __GR_SORTING_SO_ARG ) );
        SetPixelShader( NULL );
		
		SetDepthStencilState( DisableDepthTestWrite, 0);
    }
}

#endif