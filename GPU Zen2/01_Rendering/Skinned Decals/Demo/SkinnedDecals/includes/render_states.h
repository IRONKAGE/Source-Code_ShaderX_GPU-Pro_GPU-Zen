#ifndef RENDER_STATES_H
#define RENDER_STATES_H

#define NUM_BACKBUFFERS 3
#define MAX_NUM_MRTS 8
#define MAX_NUM_VIEWPORTS 8
#define MAX_NUM_SCISSOR_RECTS 8
#define MAX_NUM_VERTEX_BUFFERS 8
#define MAX_NUM_RESOURCE_BARRIERS 32
#define MAX_NUM_RTV_DESCS 128
#define MAX_NUM_DSV_DESCS 32
#define MAX_NUM_CBV_SRV_UAV_DESCS 8192
#define MAX_NUM_SAMPLER_DESCS 256
#define MAX_NUM_CMD_LISTS 16
#define MAX_NUM_INPUT_ELEMENT_DESCS 8
#define MAX_NUM_ROOT_PARAMS 12
#define MAX_NUM_STATIC_SAMPLERS 4
#define MAX_NUM_ROOT_DESC_TABLE_RANGES 4
#define MAX_NUM_CMD_SIGNATURE_ARGS 8
#define MAX_NUM_ROOT_CONSTS 4

typedef D3D12_CPU_DESCRIPTOR_HANDLE CpuDescHandle;
typedef D3D12_GPU_DESCRIPTOR_HANDLE GpuDescHandle;
typedef D3D12_GPU_VIRTUAL_ADDRESS GpuVirtualAddress;

struct DescHandle
{
  CpuDescHandle cpuDescHandle;
  GpuDescHandle gpuDescHandle;
};

enum shaderTypes
{
  VERTEX_SHADER=0,
  HULL_SHADER,
  DOMAIN_SHADER,
  GEOMETRY_SHADER,
  PIXEL_SHADER,
  COMPUTE_SHADER,
  NUM_SHADER_TYPES
};

enum conservativeRasterizationTiers
{
  CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED,
  CONSERVATIVE_RASTERIZATION_TIER_1             = D3D12_CONSERVATIVE_RASTERIZATION_TIER_1,
  CONSERVATIVE_RASTERIZATION_TIER_2             = D3D12_CONSERVATIVE_RASTERIZATION_TIER_2,
  CONSERVATIVE_RASTERIZATION_TIER_3             = D3D12_CONSERVATIVE_RASTERIZATION_TIER_3
};

enum rootParamTypes
{
  DESC_TABLE_ROOT_PARAM = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE,
  CONST_ROOT_PARAM      = D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS,
  CBV_ROOT_PARAM        = D3D12_ROOT_PARAMETER_TYPE_CBV,
  SRV_ROOT_PARAM        = D3D12_ROOT_PARAMETER_TYPE_SRV,
  UAV_ROOT_PARAM        = D3D12_ROOT_PARAMETER_TYPE_UAV
};

BITFLAGS_ENUM(UINT, resourceStates)
{
  COMMON_RESOURCE_STATE                     = D3D12_RESOURCE_STATE_COMMON,
  VERTEX_AND_CONSTANT_BUFFER_RESOURCE_STATE = D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,
  INDEX_BUFFER_RESOURCE_STATE               = D3D12_RESOURCE_STATE_INDEX_BUFFER,
  RENDER_TARGET_RESOURCE_STATE              = D3D12_RESOURCE_STATE_RENDER_TARGET,
  UNORDERED_ACCESS_RESOURCE_STATE           = D3D12_RESOURCE_STATE_UNORDERED_ACCESS,
  DEPTH_WRITE_RESOURCE_STATE                = D3D12_RESOURCE_STATE_DEPTH_WRITE,
  DEPTH_READ_RESOURCE_STATE                 = D3D12_RESOURCE_STATE_DEPTH_READ,
  NON_PIXEL_SHADER_RESOURCE_RESOURCE_STATE  = D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE,
  PIXEL_SHADER_RESOURCE_RESOURCE_STATE      = D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,
  STREAM_OUT_RESOURCE_STATE                 = D3D12_RESOURCE_STATE_STREAM_OUT,
  INDIRECT_ARGUMENT_RESOURCE_STATE          = D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT,
  COPY_DEST_RESOURCE_STATE                  = D3D12_RESOURCE_STATE_COPY_DEST,
  COPY_SOURCE_RESOURCE_STATE                = D3D12_RESOURCE_STATE_COPY_SOURCE,
  RESOLVE_DEST_RESOURCE_STATE               = D3D12_RESOURCE_STATE_RESOLVE_DEST,
  RESOLVE_SOURCE_RESOURCE_STATE             = D3D12_RESOURCE_STATE_RESOLVE_SOURCE,
  GENERIC_READ_RESOURCE_STATE               = D3D12_RESOURCE_STATE_GENERIC_READ,
  PRESENT_RESOURCE_STATE                    = D3D12_RESOURCE_STATE_PRESENT,
  PREDICATION_RESOURCE_STATE                = D3D12_RESOURCE_STATE_PREDICATION
};

enum resourceBarrrierTypes
{
  TRANSITION_RESOURCE_BARRIER_TYPE = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,
  ALIASING_RESOURCE_BARRIER_TYPE   = D3D12_RESOURCE_BARRIER_TYPE_ALIASING,
  UAV_RESOURCE_BARRIER_TYPE        = D3D12_RESOURCE_BARRIER_TYPE_UAV
};

enum primitiveTopologyTypes
{
  UNDEFINED_PRIMITIVE_TOPOLOGY_TYPE = D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED,
  POINT_PRIMITIVE_TOPOLOGY_TYPE     = D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT,
  LINE_PRIMITIVE_TOPOLOGY_TYPE      = D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE,
  TRIANGLE_PRIMITIVE_TOPOLOGY_TYPE  = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE,
  PATCH_PRIMITIVE_TOPOLOGY_TYPE     = D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH
};

enum primitiveTopologies
{
  UNDEFINED_PRIMITIVE_TOPOLOGY         = D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED,
  POINTLIST_PRIMITIVE_TOPOLOGY         = D3D11_PRIMITIVE_TOPOLOGY_POINTLIST,
  LINELIST_PRIMITIVE_TOPOLOGY          = D3D_PRIMITIVE_TOPOLOGY_LINELIST,
  LINESTRIP_PRIMITIVE_TOPOLOGY         = D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP,
  TRIANGLELIST_PRIMITIVE_TOPOLOGY      = D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
  TRIANGLESTRIP_PRIMITIVE_TOPOLOGY     = D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
  LINELIST_ADJ_PRIMITIVE_TOPOLOGY      = D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
  LINESTRIP_ADJ_PRIMITIVE_TOPOLOGY     = D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
  TRIANGLELIST_ADJ_PRIMITIVE_TOPOLOGY  = D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
  TRIANGLESTRIP_ADJ_PRIMITIVE_TOPOLOGY = D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
  PATCH_1_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
  PATCH_2_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
  PATCH_3_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
  PATCH_4_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
  PATCH_5_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
  PATCH_6_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
  PATCH_7_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
  PATCH_8_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
  PATCH_9_PRIMITIVE_TOPOLOGY           = D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
  PATCH_10_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
  PATCH_11_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
  PATCH_12_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
  PATCH_13_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
  PATCH_14_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
  PATCH_15_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
  PATCH_16_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
  PATCH_17_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
  PATCH_18_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
  PATCH_19_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
  PATCH_20_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
  PATCH_21_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
  PATCH_22_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
  PATCH_23_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
  PATCH_24_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
  PATCH_25_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
  PATCH_26_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
  PATCH_27_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
  PATCH_28_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
  PATCH_29_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
  PATCH_30_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
  PATCH_31_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
  PATCH_32_PRIMITIVE_TOPOLOGY          = D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
};

enum blendStates
{
  ZERO_BLEND             = D3D12_BLEND_ZERO,
  ONE_BLEND              = D3D12_BLEND_ONE,
  SRC_COLOR_BLEND        = D3D12_BLEND_SRC_COLOR,
  INV_SRC_COLOR_BLEND    = D3D12_BLEND_INV_SRC_COLOR,
  SRC_ALPHA_BLEND        = D3D12_BLEND_SRC_ALPHA,
  INV_SRC_ALPHA_BLEND    = D3D12_BLEND_INV_SRC_ALPHA,
  DST_ALPHA_BLEND        = D3D12_BLEND_DEST_ALPHA,
  INV_DST_ALPHA_BLEND    = D3D12_BLEND_INV_DEST_ALPHA,
  DST_COLOR_BLEND        = D3D12_BLEND_DEST_COLOR,
  INV_DST_COLOR_BLEND    = D3D12_BLEND_INV_DEST_COLOR,
  SRC_ALPHA_SAT_BLEND    = D3D12_BLEND_SRC_ALPHA_SAT,
  BLEND_FACTOR_BLEND     = D3D12_BLEND_BLEND_FACTOR,
  INV_BLEND_FACTOR_BLEND = D3D12_BLEND_INV_BLEND_FACTOR,
  SRC1_COLOR_BLEND       = D3D12_BLEND_SRC1_COLOR,
  INV_SRC1_COLOR_BLEND   = D3D12_BLEND_INV_SRC1_COLOR,
  SRC1_ALPHA_BLEND       = D3D12_BLEND_SRC1_ALPHA,
  INV_SRC1_ALPHA_BLEND   = D3D12_BLEND_INV_SRC1_ALPHA
};

enum blendOps
{
  ADD_BLEND_OP          = D3D12_BLEND_OP_ADD,
  SUBTRACT_BLEND_OP     = D3D12_BLEND_OP_SUBTRACT,
  REV_SUBTRACT_BLEND_OP = D3D12_BLEND_OP_REV_SUBTRACT,
  MIN_BLEND_OP          = D3D12_BLEND_OP_MIN,
  MAX_BLEND_OP          = D3D12_BLEND_OP_MAX
};

enum logicOps
{
  CLEAR_LOGIC_OP         = D3D12_LOGIC_OP_CLEAR,
  SET_LOGIC_OP           = D3D12_LOGIC_OP_SET,
  COPY_LOGIC_OP          = D3D12_LOGIC_OP_COPY,
  COPY_INVERTED_LOGIC_OP = D3D12_LOGIC_OP_COPY_INVERTED,
  NOOP_LOGIC_OP          = D3D12_LOGIC_OP_NOOP,
  INVERT_LOGIC_OP        = D3D12_LOGIC_OP_INVERT,
  AND_LOGIC_OP           = D3D12_LOGIC_OP_AND,
  NAND_LOGIC_OP          = D3D12_LOGIC_OP_NAND,
  OR_LOGIC_OP            = D3D12_LOGIC_OP_OR,
  NOR_LOGIC_OP           = D3D12_LOGIC_OP_NOR,
  XOR_LOGIC_OP           = D3D12_LOGIC_OP_XOR,
  EQUIV_LOGIC_OP         = D3D12_LOGIC_OP_EQUIV,
  AND_REVERSE_LOGIC_OP   = D3D12_LOGIC_OP_AND_REVERSE,
  AND_INVERTED_LOGIC_OP  = D3D12_LOGIC_OP_AND_INVERTED,
  OR_REVERSE_LOGIC_COP   = D3D12_LOGIC_OP_OR_REVERSE,
  OR_INVERTED_LOGIC_OP   = D3D12_LOGIC_OP_OR_INVERTED
};

enum stencilOps
{
  KEEP_STENCIL_OP     = D3D12_STENCIL_OP_KEEP,
  ZERO_STENCIL_OP     = D3D12_STENCIL_OP_ZERO,
  REPLACE_STENCIL_OP  = D3D12_STENCIL_OP_REPLACE,
  INCR_SAT_STENCIL_OP = D3D12_STENCIL_OP_INCR_SAT,
  DECR_SAT_STENCIL_OP = D3D12_STENCIL_OP_DECR_SAT,
  INVERT_STENCIL_OP   = D3D12_STENCIL_OP_INVERT,
  INCR_STENCIL_OP     = D3D12_STENCIL_OP_INCR,
  DECR_STENCIL_OP     = D3D12_STENCIL_OP_DECR
};

BITFLAGS_ENUM(UINT8, colorMaskBits)
{
  NONE_COLOR_MASK  = 0,
  RED_COLOR_MASK   = D3D12_COLOR_WRITE_ENABLE_RED,
  GREEN_COLOR_MASK = D3D12_COLOR_WRITE_ENABLE_GREEN,
  BLUE_COLOR_MASK  = D3D12_COLOR_WRITE_ENABLE_BLUE,
  ALPHA_COLOR_MASK = D3D12_COLOR_WRITE_ENABLE_ALPHA,
  ALL_COLOR_MASK   = D3D12_COLOR_WRITE_ENABLE_ALL
};

enum fillModes
{
  SOLID_FILL     = D3D12_FILL_MODE_SOLID,
  WIREFRAME_FILL = D3D12_FILL_MODE_WIREFRAME
};

enum cullModes
{
  NONE_CULL  = D3D12_CULL_MODE_NONE,
  FRONT_CULL = D3D12_CULL_MODE_FRONT,
  BACK_CULL  = D3D12_CULL_MODE_BACK
};

enum filterModes
{
  MIN_MAG_MIP_POINT_FILTER                         = D3D12_FILTER_MIN_MAG_MIP_POINT,
  MIN_MAG_POINT_MIP_LINEAR_FILTER                  = D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR,
  MIN_POINT_MAG_LINEAR_MIP_POINT                   = D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
  MIN_POINT_MAG_MIP_LINEAR_FILTER                  = D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR,
  MIN_LINEAR_MAG_MIP_POINT_FILTER                  = D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT,
  MIN_LINEAR_MAG_POINT_MIP_LINEAR_FILTER           = D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
  MIN_MAG_LINEAR_MIP_POINT_FILTER                  = D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT,
  MIN_MAG_MIP_LINEAR_FILTER                        = D3D12_FILTER_MIN_MAG_MIP_LINEAR,
  ANISOTROPIC_FILTER                               = D3D12_FILTER_ANISOTROPIC,
  COMPARISON_MIN_MAG_MIP_POINT_FILTER              = D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT,
  COMPARISON_MIN_MAG_POINT_MIP_LINEAR_FILTER       = D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
  COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT_FILTER = D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
  COMPARISON_MIN_POINT_MAG_MIP_LINEAR_FITLER       = D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
  COMPARISON_MIN_LINEAR_MAG_MIP_POINT_FILTER       = D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
  COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR       = D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
  COMPARISON_MIN_MAG_LINEAR_MIP_POINT_FILTER       = D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
  COMPARISON_MIN_MAG_MIP_LINEAR_FILTER             = D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
  COMPARISON_ANISOTROPIC_FILTER                    = D3D12_FILTER_COMPARISON_ANISOTROPIC
};

enum texAddressModes
{
  WRAP_TEX_ADDRESS        = D3D12_TEXTURE_ADDRESS_MODE_WRAP,
  MIRROR_TEX_ADDRESS      = D3D12_TEXTURE_ADDRESS_MODE_MIRROR,
  CLAMP_TEX_ADDRESS       = D3D12_TEXTURE_ADDRESS_MODE_CLAMP,
  BORDER_TEX_ADDRESS      = D3D12_TEXTURE_ADDRESS_MODE_BORDER,
  MIRROR_ONCE_TEX_ADDRESS = D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE
};

enum comparisonFuncs
{
  NEVER_CMP_FUNC    = D3D12_COMPARISON_FUNC_NEVER,
  LESS_CMP_FUNC     = D3D12_COMPARISON_FUNC_LESS,
  EQUAL_CMP_FUNC    = D3D12_COMPARISON_FUNC_EQUAL,
  LEQUAL_CMP_FUNC   = D3D12_COMPARISON_FUNC_LESS_EQUAL,
  GREATER_CMP_FUNC  = D3D12_COMPARISON_FUNC_GREATER,
  NOTEQUAL_CMP_FUNC = D3D12_COMPARISON_FUNC_NOT_EQUAL,
  GEQUAL_CMP_FUNC   = D3D12_COMPARISON_FUNC_GREATER_EQUAL,
  ALWAYS_CMP_FUNC   = D3D12_COMPARISON_FUNC_ALWAYS
};

enum staticBorderColors
{
  TRANSPARENT_BLACK_STATIC_BORDER_COLOR = D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK,
  OPAQUE_BLACK_STATIC_BORDER_COLOR      = D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK,
  OPAQUE_WHITE_STATIC_BORDER_COLOR      = D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE
};

#endif