//#version 430 core

//#define GAUSS2_SUPERSAMPLE

layout(binding=0) uniform sampler2D normal_tex;
layout(binding=1) uniform sampler2D depth_tex;
layout(binding=2) uniform sampler2D layered_penumbra_tex;
layout(binding=3) uniform sampler2D shadow_tex;
//layout(binding=4) uniform sampler2DArray spot_shadow_minfilter_tex;
//layout(binding=5) uniform samplerCubeArray point_shadow_minfilter_tex;
//layout(binding=6) uniform usampler2D layered_translucency_tex;

uniform mat4 mvp;
uniform mat4 mv;
uniform vec2 nearfar; //2.5, 1000
uniform mat4 inv_view;
uniform mat4 inv_mv;
uniform float err_depth;
uniform float aniso_threshold = 0.25;

in vec2 tex_coord;
in vec4 vs_pos;

layout(location=0) out vec4 color;
//layout(location=1) out uvec4 color2;

//rotated grid pattern:
//116.5650512 degrees rotated
//1.11803398875 stretched

//const vec2 direction = vec2(0, 1);
const vec2 direction = vec2(-0.44721359585778655717526397765935, 0.89442719082100156952748325334158) * 1.11803398875;

float unpack_shadow( vec4 shadow, int layer )
{
  return shadow[layer];
}

#include "common.h"

#include "gauss_blur_common.h"

void main()
{	
	vec4 penumbra = texture(layered_penumbra_tex, tex_coord);
  
#ifdef GAUSS2_SUPERSAMPLE
  float hard_shadow0 = avg(textureGather(shadow_tex, tex_coord, 0));
  float hard_shadow1 = avg(textureGather(shadow_tex, tex_coord, 1));
  float hard_shadow2 = avg(textureGather(shadow_tex, tex_coord, 2));
  float hard_shadow3 = avg(textureGather(shadow_tex, tex_coord, 3));
#else
  vec4 hard_shadow = texture(shadow_tex, tex_coord);
#endif
	
	vec3 n = texture(normal_tex, tex_coord).xyz * 2 - 1;
	float depth = texture( depth_tex, tex_coord ).x;
  
  float near = nearfar.x; //-2.5
  float far = nearfar.y; //-1000
  float proj_a = -(far + near) / (far - near);
  float proj_b = (-2 * far * near) / (far - near);
  float linear_depth = -proj_b / (depth * 2 - 1 + proj_a) / -far;
  
	vec2 step_size = get_step_size( direction, n, linear_depth, aniso_threshold ) / -far;
  //vec2 step_size = get_step_size( direction, n, linear_depth, aniso_threshold ) / vec2(1280,720);
  
#ifdef GAUSS2_SUPERSAMPLE
  //blur each layer
  color.x = blur( shadow_tex, hard_shadow0, step_size, depth, penumbra.x, 0 );
  color.y = blur( shadow_tex, hard_shadow1, step_size, depth, penumbra.y, 1 );
  color.z = blur( shadow_tex, hard_shadow2, step_size, depth, penumbra.z, 2 );
  color.w = blur( shadow_tex, hard_shadow3, step_size, depth, penumbra.w, 3 );
#else
  //blur each layer
  color.x = blur( shadow_tex, hard_shadow.x, step_size, depth, penumbra.x, 0 );
  color.y = blur( shadow_tex, hard_shadow.y, step_size, depth, penumbra.y, 1 );
  color.z = blur( shadow_tex, hard_shadow.z, step_size, depth, penumbra.z, 2 );
  color.w = blur( shadow_tex, hard_shadow.w, step_size, depth, penumbra.w, 3 );
#endif
  
  //color = uint_to_rgba8( texture( layered_translucency_tex, tex_coord ).x );
  //color = blur_translucency( layered_translucency_tex, uint_to_rgba8( texture( layered_translucency_tex, tex_coord ).x ), step_size, depth, penumbra.w, 4 );
  //color2.x = rgba8_to_uint( blur_translucency( layered_translucency_tex, uint_to_rgba8( texture( layered_translucency_tex, tex_coord ).x ), step_size, depth, penumbra.w, 4 ) );
  
  //color.xyz = vec3( (1-color.x) * n );
}
