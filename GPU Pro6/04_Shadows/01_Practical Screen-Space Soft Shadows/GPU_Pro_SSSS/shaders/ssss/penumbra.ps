//#version 430 core

//#define EXPONENTIAL_SHADOWS

layout(binding=0) uniform sampler2D depth_tex;
layout(binding=1) uniform sampler2DArray spot_shadow_tex;
layout(binding=2) uniform samplerCubeArray point_shadow_tex;
//layout(binding=3) uniform samplerCubeArray point_shadow_translucent_tex;

uniform mat4 mvp;
uniform mat4 mv;
uniform int num_lights;
uniform vec2 nearfar; //2.5, 1000
uniform mat4 inv_view;
uniform mat4 inv_mv;

//exponential shadow map coefficient
float k = 50;

float proj_a = -(nearfar.y + nearfar.x) / (nearfar.y - nearfar.x);
float proj_b = (-2 * nearfar.y * nearfar.x) / (nearfar.y - nearfar.x);

in vec2 tex_coord;
in vec4 vs_pos;

layout(location=0) out vec4 layered_shadow;
layout(location=1) out vec4 layered_penumbra;
//layout(location=2) out uvec4 layered_translucency;

uniform float light_size_data[16];
uniform float radius_data[16];
uniform int lighting_type_data[16];
uniform int layer_data[16];
uniform vec4 vs_position_data[16];
uniform vec4 ms_position_data[16];
uniform mat4 spot_shadow_mat_data[16];
uniform mat4 point_shadow_mat_data[16*6];
uniform uint light_indices[16];

#include "common.h"

/*
float find_blocker_spot( int layer, sampler2DArray tex, vec4 shad_coord, float search_width, int num_samples )
{
	float step_size = 2 * search_width / float(num_samples);
	
	shad_coord.xy -= search_width;
	
	float blocker_sum = 0;
	float receiver = shad_coord.z;
	float blocker_count = 0;
	float found_blocker = 0;
	
	for( int c = 0; c < num_samples; ++c )
	{
		for( int d = 0; d < num_samples; ++d )
		{
			float depth = texture( tex, vec3( shad_coord.xy + vec2( c * step_size, d * step_size ), layer ) ).x; //[0...1]
      float lightndcdepth = depth * 2 - 1; //[-1...1]
      float lightviewdepth = -proj_b / (lightndcdepth + proj_a);
      float lightprojdepth = lightndcdepth * -lightviewdepth;
      
			if( depth < receiver )
			{
				blocker_sum += lightprojdepth;
				++blocker_count;
				found_blocker = 1;
			}
		}
	}
	
	float result = 0;
	
	if( found_blocker == 0 )
	{
		result = 999;
	}
	else
	{
		result = blocker_sum / blocker_count;
	}
	
	return result;
}*/

void calculate_penumbra_spot( int layer, float viewdepth, vec4 ls_pos, sampler2DArray tex, float ls, int search_samples, out float penumbra, out float blocker, out float shadow )
{
  vec4 shadow_coord = ls_pos;
  
  if( bounds_check(shadow_coord.x) &&
      bounds_check(shadow_coord.y) &&
      bounds_check(shadow_coord.z))
  {    
    float distance_from_light = texture( tex, vec3( shadow_coord.xy, layer ) ).x;
    shadow = float(distance_from_light < shadow_coord.z);
  }
  
  float lsndcpos = shadow_coord.z * 2 - 1;
  float lsviewdepth = -proj_b / (lsndcpos + proj_a);
  float lsprojz = lsndcpos * -lsviewdepth;
  
  /*blocker = find_blocker_spot( layer, tex, shadow_coord, ls / abs(lsprojz), search_samples );
  
  //blocker is between [0...1]
  penumbra = abs(estimate_penumbra( abs(lsprojz), abs(blocker) ));*/
}

void calculate_penumbra_point( int layer, float bias, float proj_a, float proj_b, vec3 right, vec3 up, vec3 texcoord, float viewdepth, vec4 ls_pos, samplerCubeArray tex, float ls, int search_samples, out float penumbra, out float blocker, out float shadow )
{
  vec4 shadow_coord = ls_pos;
  
  float lsndcpos = shadow_coord.z * 2 - 1;
  float lsviewdepth = -proj_b / (lsndcpos + proj_a);
  float lsprojz = lsndcpos * -lsviewdepth;
  
  blocker = find_blocker_point( layer, bias, proj_a, proj_b, right, up, tex, texcoord, shadow_coord, ls / abs(lsprojz) * 100, search_samples );
  
  //blocker is between [0...1]
  penumbra = abs(estimate_penumbra( abs(lsprojz), abs(blocker) )) * ls * ls;
  
  if( bounds_check(shadow_coord.x) &&
      bounds_check(shadow_coord.y) &&
      bounds_check(shadow_coord.z))
  {    
    float distance_from_light = texture( tex, vec4( texcoord.xyz, layer ) ).x;
#ifndef EXPONENTIAL_SHADOWS
    shadow = float(distance_from_light < shadow_coord.z);
#else
    shadow = 1-clamp( 2.0 - exp((shadow_coord.z - distance_from_light) * k), 0, 1 );
#endif
  }
}

void main()
{
	vec3 view_ray = vec3( vs_pos.xy / vs_pos.z, 1 );
	float depth = texture( depth_tex, tex_coord ).x;
	float linear_depth = -proj_b / (depth * 2 - 1 + proj_a);
	vec3 pos = view_ray * linear_depth; //view space pos
  vec4 ms_pos = inv_mv * vec4( pos, 1 );

  if( depth > 0.999 )
  {
    discard;
  }
  
  //this has a huge impact on performance O(nxn)
  //should be at least 3 [3,5,7,11,13,15]
  const int search_samples = 7;
	
  uint a2_bits = 0;
  layered_penumbra = vec4(0);
  //layered_translucency.x = rgba8_to_uint( vec4(0, 0, 0, 1) ); //fully opaque, black object
  //layered_translucency = vec4(0);
  
  int nn = 0;
  //for( int i = nn; i < nn+1; ++i )
  for( int i = 0; i < num_lights; ++i )
  {
    int index = int(light_indices[i]);
    float penumbra, blocker, shadow = 0;
    vec4 ls_pos;
    
    float att = 0;
    
    float bias = 0.001;
    
    if( lighting_type_data[i] == 0 ) //point light
    {
      vec3 light_dir = vs_position_data[i].xyz - pos.xyz;
      float dist = length(light_dir);
      light_dir = normalize(light_dir);
      
      att = float(dist < radius_data[i]);
      layered_shadow = vec4(float(radius_data[0]==0)); //catalyst glsl compiler bug fix :D
      
      if( att > 0 )
      {
        vec4 model_light_dir = inv_view * vec4( light_dir.xyz, 0 );
            
        float axis[6];
        axis[0] = -model_light_dir.x;
        axis[1] = model_light_dir.x;
        axis[2] = -model_light_dir.y;
        axis[3] = model_light_dir.y;
        axis[4] = -model_light_dir.z;
        axis[5] = model_light_dir.z;
        
        int max_axis = 0;
        for( int c = 0; c < 6; ++c )
          if( axis[max_axis] < axis[c] )
            max_axis = c;
            

        vec3 ls_model_pos = ms_pos.xyz - ms_position_data[i].xyz;
      
        ls_pos = point_shadow_mat_data[i*6+max_axis] * vec4( ls_model_pos, 1 );
        
        if(ls_pos.w > 0)
        {  
          ls_pos = (ls_pos / ls_pos.w) * 0.5 + 0.5; //in range [0...1]
#ifndef EXPONENTIAL_SHADOWS
          ls_pos.z -= bias;
#endif
          vec3 texcoord = normalize(ls_model_pos);
          
          proj_a = -(radius_data[i] + 1) / (radius_data[i] - 1);
          proj_b = (-2 * radius_data[i] * 1) / (radius_data[i] - 1);
          
          calculate_penumbra_point(index, bias, proj_a, proj_b, right_vec[max_axis], up_vec[max_axis], texcoord, linear_depth, ls_pos, point_shadow_tex, light_size_data[i], search_samples, penumbra, blocker, shadow);
          
          /*if( i == 13 && shadow > 0.9 )
          {
            vec4 translucency = texture( point_shadow_translucent_tex, vec4( texcoord, 0 ) );
          
            layered_translucency.x = rgba8_to_uint( translucency );
            //layered_translucency = vec4( translucency );
          }
          else
          {
            layered_translucency.x = rgba8_to_uint( vec4(1, 1, 1, 0) );
            //layered_translucency = vec4(1);
          }*/
        }
      }
    }
    else if( lighting_type_data[i] == 1 ) //spot light
    {
      ls_pos = spot_shadow_mat_data[i] * vec4( pos, 1 );
      
      if(ls_pos.w > 0)
      {
        ls_pos = ls_pos / ls_pos.w; //in range [0...1]
        
        ls_pos.z -= bias;
        calculate_penumbra_spot(index, linear_depth, ls_pos, spot_shadow_tex, light_size_data[i], search_samples, penumbra, blocker, shadow);
      }
    }
    
    if( att > 0 )
    {  
      switch( layer_data[i] )
      {
        case 0:
        {
          layered_penumbra.x = (blocker > 998 ? 0.0 : penumbra);
#ifdef EXPONENTIAL_SHADOWS
          layered_shadow.x = shadow;
#endif
          break;
        }
        case 1:
        {
          layered_penumbra.y = (blocker > 998 ? 0.0 : penumbra);
#ifdef EXPONENTIAL_SHADOWS
          layered_shadow.y = shadow;
#endif
          break;
        }
        case 2:
        {
          layered_penumbra.z = (blocker > 998 ? 0.0 : penumbra);
#ifdef EXPONENTIAL_SHADOWS
          layered_shadow.z = shadow;
#endif
          break;
        }
        case 3:
        {
          layered_penumbra.w = (blocker > 998 ? 0.0 : penumbra);
#ifdef EXPONENTIAL_SHADOWS
          layered_shadow.w = shadow;
#endif
          break;
        }
      }
      
#ifndef EXPONENTIAL_SHADOWS
      //shadow mask bits
      a2_bits = a2_bits | (bool(shadow) ? (1 << layer_data[i]) : 0);
#endif
    }
    
    //debug
    //layered_penumbra.xyz = vec3( (blocker > 998 ? 0.0 : penumbra), (blocker > 998 ? 1.0 : penumbra), 0 );
    //layered_penumbra.xyz = vec3( ( 1 - float(shadow) ) * dot(n, l)/* * att*/ );
  }
  
#ifndef EXPONENTIAL_SHADOWS 
  layered_shadow.x = float(a2_bits) / 16.0;
#endif
  
  //layered_translucency = uint_to_rgba8( layered_translucency.x );
  
  //debug
  //layered_penumbra.xyz = vec3( ( a2_bits & (1 << 3) ) );
  //layered_penumbra.xyz = vec3( layered_penumbra.w > 0 );
  //layered_penumbra = (layered_penumbra.x + layered_penumbra.y + layered_penumbra.z + layered_penumbra.w) * 0.25;
  //layered_shadow = vec4(pow(layered_translucency.xyz, vec3(1/2.2)), 1);
  //layered_shadow = vec4( layer_data[0] );
  //layered_shadow = vec4( layered_shadow.xxx, 1 );
  //layered_shadow = vec4(layered_penumbra.xyz*10, 1);
  //layered_penumbra *= 1.5;
}
