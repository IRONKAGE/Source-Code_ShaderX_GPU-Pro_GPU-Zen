[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION Anisotropic Lighting Example
	COPYRIGHT 	Imagination Technologies Ltd.
[/HEADER]

[TEXTURES] 
	// NO TEXTURES USED
[/TEXTURES]

[VERTEXSHADER] 
	NAME MyVertexShader 
		
	[GLSL_CODE]
		attribute highp vec3	myVertex;
		attribute mediump vec3	myNormal;
		
		uniform mediump mat4	myWVPMatrix;
		uniform mediump mat3	myWorldViewIT;
		uniform mediump vec3	myLightDirection;
		uniform mediump vec3	myEyePos;
		
		varying mediump float	diffuseIntensity;
		varying mediump float	specularIntensity;
		
		const mediump vec4 cMaterial = vec4(0.4,0.6,0.9,0.0);
		const mediump vec3 cGrainDirection = vec3(1.0, 2.0, 0.0);

		void main(void)
		{
			gl_Position = myWVPMatrix * vec4(myVertex, 1.0);
			mediump vec3 transNormal = normalize(myWorldViewIT * myNormal);
			
			mediump vec3 normalXgrain = cross(transNormal, normalize(cGrainDirection));
			mediump vec3 tangent = normalize(cross(normalXgrain, transNormal));
			mediump float LdotT = dot(tangent, normalize(myLightDirection));
			mediump float VdotT = dot(tangent, normalize(myEyePos));
			
			mediump float temp = sqrt(1.0 - LdotT * LdotT);
			mediump float NdotL = temp;
			mediump float VdotR = temp * sqrt(1.0 - VdotT * VdotT) - VdotT * LdotT;
			
			diffuseIntensity = max(NdotL * cMaterial.x + cMaterial.y, 0.0);
			specularIntensity = max(VdotR * VdotR * cMaterial.z + cMaterial.w, 0.0);
		}
	[/GLSL_CODE]
[/VERTEXSHADER]
    
[FRAGMENTSHADER] 
	NAME MyFragShader 
		
	[GLSL_CODE]
		varying mediump float	diffuseIntensity;
		varying lowp float		specularIntensity;
		
		const lowp vec3 cBaseColour = vec3(0.9, 0.2, 0.2);

		void main (void)
		{
			lowp vec3 finalColour = (cBaseColour * diffuseIntensity) + specularIntensity;
			gl_FragColor = vec4(finalColour, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
[EFFECT] 
	NAME AnisotropicEffect
		
	UNIFORM myWorldViewIT 		WORLDVIEWIT
	UNIFORM myWVPMatrix 		WORLDVIEWPROJECTION
	UNIFORM	myLightDirection	LIGHTDIRWORLD1
	UNIFORM	myEyePos			EYEPOSWORLD
	
	ATTRIBUTE myVertex 			POSITION 	
	ATTRIBUTE myNormal 			NORMAL 		
	
	VERTEXSHADER MyVertexShader
	FRAGMENTSHADER MyFragShader

[/EFFECT]
